version: '3'

services:
  redis:
    image: redis:alpine
    networks:
      - frontend
    healthcheck:
      test: redis-cli ping

  db:
    image: postgres:9.6
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - backend
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1

  vote:
    image: bretfisher/examplevotingapp_vote
    networks:
      - frontend
    ports:
      - '5000:80'
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.default.protocol=http"
      - "traefik.http.routers.vote.rule=Host(`vote.localhost`)"

  result:
    build:
      context: result
    command: nodemon --inspect=0.0.0.0:9229 server.js
    environment:
      - NODE_ENV=development
    ports:
      - '5001:80'
      - '9229:9229'
    volumes:
      - ./result:/app
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.default.protocol=http"
      - "traefik.http.routers.result.rule=Host(`result.localhost`)"

  worker:
    image: bretfisher/examplevotingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  reverse-proxy:
    # The official v2.0 Traefik docker image
    image: traefik:v2.0
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      - frontend

networks:
    frontend:
    backend:

volumes:
    db-data:
